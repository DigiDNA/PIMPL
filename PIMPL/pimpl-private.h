/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*!
 * @header      PIMPL-Private.h
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com
 * @abstract    PIMPL - Private declarations
 */

namespace PIMPL
{
    template< class T >
    Object< T >::Object( void ): impl( new IMPL )
    {
        std::cout << "PIMPL::Object< T > CTOR" << std::endl;
    }
    
    template< class T >
    Object< T >::Object( const Object & o ): impl( new IMPL( *( o.impl ) ) )
    {
        std::cout << "PIMPL::Object< T > CCTOR" << std::endl;
    }
    
    template< class T >
    Object< T >::Object( Object && o )
    {
        std::cout << "PIMPL::Object< T > MCTOR" << std::endl;
        
        this->impl = o.impl;
        o.impl     = nullptr;
    }
    
    template< class T >
    Object< T >::~Object( void )
    {
        std::cout << "PIMPL::Object< T > DTOR" << std::endl;
        
        delete this->impl;
    }
    
    template< class T >
    Object< T > & Object< T >::operator =( Object o )
    {
        std::cout << "PIMPL::Object< T > operator =" << std::endl;
        
        swap( *( this ), o );
        
        return *( this );
    }
    
    template< class U >
    void swap( Object< U > & o1, Object< U > & o2 )
    {
        std::cout << "PIMPL::swap< T >" << std::endl;
        
        using std::swap;
        
        swap( o1.impl, o2.impl );
    }
}
